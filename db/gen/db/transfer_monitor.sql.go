// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: transfer_monitor.sql

package db

import (
	"context"
)

const getTransferMonitorMetadata = `-- name: GetTransferMonitorMetadata :one
SELECT id, created_at, updated_at, chain_id, height_last_seen FROM transfer_monitor_metadata WHERE chain_id = ?
`

func (q *Queries) GetTransferMonitorMetadata(ctx context.Context, chainID string) (TransferMonitorMetadatum, error) {
	row := q.db.QueryRowContext(ctx, getTransferMonitorMetadata, chainID)
	var i TransferMonitorMetadatum
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ChainID,
		&i.HeightLastSeen,
	)
	return i, err
}

const insertTransferMonitorMetadata = `-- name: InsertTransferMonitorMetadata :one
INSERT INTO transfer_monitor_metadata (chain_id, height_last_seen) VALUES (?, ?) ON CONFLICT (chain_id) DO UPDATE SET height_last_seen = excluded.height_last_seen, updated_at=CURRENT_TIMESTAMP RETURNING id, created_at, updated_at, chain_id, height_last_seen
`

type InsertTransferMonitorMetadataParams struct {
	ChainID        string
	HeightLastSeen int64
}

func (q *Queries) InsertTransferMonitorMetadata(ctx context.Context, arg InsertTransferMonitorMetadataParams) (TransferMonitorMetadatum, error) {
	row := q.db.QueryRowContext(ctx, insertTransferMonitorMetadata, arg.ChainID, arg.HeightLastSeen)
	var i TransferMonitorMetadatum
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ChainID,
		&i.HeightLastSeen,
	)
	return i, err
}
