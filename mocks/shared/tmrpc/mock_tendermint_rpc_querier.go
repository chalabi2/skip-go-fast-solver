// Code generated by mockery v2.46.2. DO NOT EDIT.

package tmrpc

import (
	context "context"

	coretypes "github.com/cometbft/cometbft/rpc/core/types"
	mock "github.com/stretchr/testify/mock"
)

// MockTendermintRPCQuerier is an autogenerated mock type for the TendermintRPCQuerier type
type MockTendermintRPCQuerier struct {
	mock.Mock
}

type MockTendermintRPCQuerier_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTendermintRPCQuerier) EXPECT() *MockTendermintRPCQuerier_Expecter {
	return &MockTendermintRPCQuerier_Expecter{mock: &_m.Mock}
}

// GetBlock provides a mock function with given fields: ctx, height
func (_m *MockTendermintRPCQuerier) GetBlock(ctx context.Context, height int64) (*coretypes.ResultBlock, error) {
	ret := _m.Called(ctx, height)

	if len(ret) == 0 {
		panic("no return value specified for GetBlock")
	}

	var r0 *coretypes.ResultBlock
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*coretypes.ResultBlock, error)); ok {
		return rf(ctx, height)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *coretypes.ResultBlock); ok {
		r0 = rf(ctx, height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*coretypes.ResultBlock)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, height)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTendermintRPCQuerier_GetBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlock'
type MockTendermintRPCQuerier_GetBlock_Call struct {
	*mock.Call
}

// GetBlock is a helper method to define mock.On call
//   - ctx context.Context
//   - height int64
func (_e *MockTendermintRPCQuerier_Expecter) GetBlock(ctx interface{}, height interface{}) *MockTendermintRPCQuerier_GetBlock_Call {
	return &MockTendermintRPCQuerier_GetBlock_Call{Call: _e.mock.On("GetBlock", ctx, height)}
}

func (_c *MockTendermintRPCQuerier_GetBlock_Call) Run(run func(ctx context.Context, height int64)) *MockTendermintRPCQuerier_GetBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockTendermintRPCQuerier_GetBlock_Call) Return(_a0 *coretypes.ResultBlock, _a1 error) *MockTendermintRPCQuerier_GetBlock_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTendermintRPCQuerier_GetBlock_Call) RunAndReturn(run func(context.Context, int64) (*coretypes.ResultBlock, error)) *MockTendermintRPCQuerier_GetBlock_Call {
	_c.Call.Return(run)
	return _c
}

// GetTx provides a mock function with given fields: ctx, txHash
func (_m *MockTendermintRPCQuerier) GetTx(ctx context.Context, txHash string) (*coretypes.ResultTx, error) {
	ret := _m.Called(ctx, txHash)

	if len(ret) == 0 {
		panic("no return value specified for GetTx")
	}

	var r0 *coretypes.ResultTx
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*coretypes.ResultTx, error)); ok {
		return rf(ctx, txHash)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *coretypes.ResultTx); ok {
		r0 = rf(ctx, txHash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*coretypes.ResultTx)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, txHash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTendermintRPCQuerier_GetTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTx'
type MockTendermintRPCQuerier_GetTx_Call struct {
	*mock.Call
}

// GetTx is a helper method to define mock.On call
//   - ctx context.Context
//   - txHash string
func (_e *MockTendermintRPCQuerier_Expecter) GetTx(ctx interface{}, txHash interface{}) *MockTendermintRPCQuerier_GetTx_Call {
	return &MockTendermintRPCQuerier_GetTx_Call{Call: _e.mock.On("GetTx", ctx, txHash)}
}

func (_c *MockTendermintRPCQuerier_GetTx_Call) Run(run func(ctx context.Context, txHash string)) *MockTendermintRPCQuerier_GetTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockTendermintRPCQuerier_GetTx_Call) Return(_a0 *coretypes.ResultTx, _a1 error) *MockTendermintRPCQuerier_GetTx_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTendermintRPCQuerier_GetTx_Call) RunAndReturn(run func(context.Context, string) (*coretypes.ResultTx, error)) *MockTendermintRPCQuerier_GetTx_Call {
	_c.Call.Return(run)
	return _c
}

// Status provides a mock function with given fields: ctx
func (_m *MockTendermintRPCQuerier) Status(ctx context.Context) (*coretypes.ResultStatus, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Status")
	}

	var r0 *coretypes.ResultStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*coretypes.ResultStatus, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *coretypes.ResultStatus); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*coretypes.ResultStatus)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTendermintRPCQuerier_Status_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Status'
type MockTendermintRPCQuerier_Status_Call struct {
	*mock.Call
}

// Status is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockTendermintRPCQuerier_Expecter) Status(ctx interface{}) *MockTendermintRPCQuerier_Status_Call {
	return &MockTendermintRPCQuerier_Status_Call{Call: _e.mock.On("Status", ctx)}
}

func (_c *MockTendermintRPCQuerier_Status_Call) Run(run func(ctx context.Context)) *MockTendermintRPCQuerier_Status_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockTendermintRPCQuerier_Status_Call) Return(_a0 *coretypes.ResultStatus, _a1 error) *MockTendermintRPCQuerier_Status_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTendermintRPCQuerier_Status_Call) RunAndReturn(run func(context.Context) (*coretypes.ResultStatus, error)) *MockTendermintRPCQuerier_Status_Call {
	_c.Call.Return(run)
	return _c
}

// TxSearch provides a mock function with given fields: ctx, query, prove, page, perPage, orderBy
func (_m *MockTendermintRPCQuerier) TxSearch(ctx context.Context, query string, prove bool, page *int, perPage *int, orderBy string) (*coretypes.ResultTxSearch, error) {
	ret := _m.Called(ctx, query, prove, page, perPage, orderBy)

	if len(ret) == 0 {
		panic("no return value specified for TxSearch")
	}

	var r0 *coretypes.ResultTxSearch
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bool, *int, *int, string) (*coretypes.ResultTxSearch, error)); ok {
		return rf(ctx, query, prove, page, perPage, orderBy)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, bool, *int, *int, string) *coretypes.ResultTxSearch); ok {
		r0 = rf(ctx, query, prove, page, perPage, orderBy)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*coretypes.ResultTxSearch)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, bool, *int, *int, string) error); ok {
		r1 = rf(ctx, query, prove, page, perPage, orderBy)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTendermintRPCQuerier_TxSearch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TxSearch'
type MockTendermintRPCQuerier_TxSearch_Call struct {
	*mock.Call
}

// TxSearch is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
//   - prove bool
//   - page *int
//   - perPage *int
//   - orderBy string
func (_e *MockTendermintRPCQuerier_Expecter) TxSearch(ctx interface{}, query interface{}, prove interface{}, page interface{}, perPage interface{}, orderBy interface{}) *MockTendermintRPCQuerier_TxSearch_Call {
	return &MockTendermintRPCQuerier_TxSearch_Call{Call: _e.mock.On("TxSearch", ctx, query, prove, page, perPage, orderBy)}
}

func (_c *MockTendermintRPCQuerier_TxSearch_Call) Run(run func(ctx context.Context, query string, prove bool, page *int, perPage *int, orderBy string)) *MockTendermintRPCQuerier_TxSearch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(bool), args[3].(*int), args[4].(*int), args[5].(string))
	})
	return _c
}

func (_c *MockTendermintRPCQuerier_TxSearch_Call) Return(_a0 *coretypes.ResultTxSearch, _a1 error) *MockTendermintRPCQuerier_TxSearch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTendermintRPCQuerier_TxSearch_Call) RunAndReturn(run func(context.Context, string, bool, *int, *int, string) (*coretypes.ResultTxSearch, error)) *MockTendermintRPCQuerier_TxSearch_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTendermintRPCQuerier creates a new instance of MockTendermintRPCQuerier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTendermintRPCQuerier(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTendermintRPCQuerier {
	mock := &MockTendermintRPCQuerier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
