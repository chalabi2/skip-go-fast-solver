// Code generated by mockery v2.40.1. DO NOT EDIT.

package transactionqueue

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockProducerTransactionQueue is an autogenerated mock type for the ProducerTransactionQueue type
type MockProducerTransactionQueue struct {
	mock.Mock
}

type MockProducerTransactionQueue_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProducerTransactionQueue) EXPECT() *MockProducerTransactionQueue_Expecter {
	return &MockProducerTransactionQueue_Expecter{mock: &_m.Mock}
}

// Push provides a mock function with given fields: ctx, txHash, chainID
func (_m *MockProducerTransactionQueue) Push(ctx context.Context, txHash string, chainID string) error {
	ret := _m.Called(ctx, txHash, chainID)

	if len(ret) == 0 {
		panic("no return value specified for Push")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, txHash, chainID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockProducerTransactionQueue_Push_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Push'
type MockProducerTransactionQueue_Push_Call struct {
	*mock.Call
}

// Push is a helper method to define mock.On call
//   - ctx context.Context
//   - txHash string
//   - chainID string
func (_e *MockProducerTransactionQueue_Expecter) Push(ctx interface{}, txHash interface{}, chainID interface{}) *MockProducerTransactionQueue_Push_Call {
	return &MockProducerTransactionQueue_Push_Call{Call: _e.mock.On("Push", ctx, txHash, chainID)}
}

func (_c *MockProducerTransactionQueue_Push_Call) Run(run func(ctx context.Context, txHash string, chainID string)) *MockProducerTransactionQueue_Push_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockProducerTransactionQueue_Push_Call) Return(_a0 error) *MockProducerTransactionQueue_Push_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProducerTransactionQueue_Push_Call) RunAndReturn(run func(context.Context, string, string) error) *MockProducerTransactionQueue_Push_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockProducerTransactionQueue creates a new instance of MockProducerTransactionQueue. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProducerTransactionQueue(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProducerTransactionQueue {
	mock := &MockProducerTransactionQueue{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
