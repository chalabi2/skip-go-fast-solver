// Code generated by mockery v2.46.2. DO NOT EDIT.

package svmrpc

import (
	context "context"

	rpc "github.com/gagliardetto/solana-go/rpc"
	mock "github.com/stretchr/testify/mock"

	solana "github.com/gagliardetto/solana-go"
)

// MockSolanaRPCClient is an autogenerated mock type for the SolanaRPCClient type
type MockSolanaRPCClient struct {
	mock.Mock
}

type MockSolanaRPCClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSolanaRPCClient) EXPECT() *MockSolanaRPCClient_Expecter {
	return &MockSolanaRPCClient_Expecter{mock: &_m.Mock}
}

// GetAccountDataBorshInto provides a mock function with given fields: ctx, account, inVar
func (_m *MockSolanaRPCClient) GetAccountDataBorshInto(ctx context.Context, account solana.PublicKey, inVar interface{}) error {
	ret := _m.Called(ctx, account, inVar)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountDataBorshInto")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, solana.PublicKey, interface{}) error); ok {
		r0 = rf(ctx, account, inVar)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSolanaRPCClient_GetAccountDataBorshInto_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountDataBorshInto'
type MockSolanaRPCClient_GetAccountDataBorshInto_Call struct {
	*mock.Call
}

// GetAccountDataBorshInto is a helper method to define mock.On call
//   - ctx context.Context
//   - account solana.PublicKey
//   - inVar interface{}
func (_e *MockSolanaRPCClient_Expecter) GetAccountDataBorshInto(ctx interface{}, account interface{}, inVar interface{}) *MockSolanaRPCClient_GetAccountDataBorshInto_Call {
	return &MockSolanaRPCClient_GetAccountDataBorshInto_Call{Call: _e.mock.On("GetAccountDataBorshInto", ctx, account, inVar)}
}

func (_c *MockSolanaRPCClient_GetAccountDataBorshInto_Call) Run(run func(ctx context.Context, account solana.PublicKey, inVar interface{})) *MockSolanaRPCClient_GetAccountDataBorshInto_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(solana.PublicKey), args[2].(interface{}))
	})
	return _c
}

func (_c *MockSolanaRPCClient_GetAccountDataBorshInto_Call) Return(err error) *MockSolanaRPCClient_GetAccountDataBorshInto_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSolanaRPCClient_GetAccountDataBorshInto_Call) RunAndReturn(run func(context.Context, solana.PublicKey, interface{}) error) *MockSolanaRPCClient_GetAccountDataBorshInto_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountDataInto provides a mock function with given fields: ctx, account, inVar
func (_m *MockSolanaRPCClient) GetAccountDataInto(ctx context.Context, account solana.PublicKey, inVar interface{}) error {
	ret := _m.Called(ctx, account, inVar)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountDataInto")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, solana.PublicKey, interface{}) error); ok {
		r0 = rf(ctx, account, inVar)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSolanaRPCClient_GetAccountDataInto_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountDataInto'
type MockSolanaRPCClient_GetAccountDataInto_Call struct {
	*mock.Call
}

// GetAccountDataInto is a helper method to define mock.On call
//   - ctx context.Context
//   - account solana.PublicKey
//   - inVar interface{}
func (_e *MockSolanaRPCClient_Expecter) GetAccountDataInto(ctx interface{}, account interface{}, inVar interface{}) *MockSolanaRPCClient_GetAccountDataInto_Call {
	return &MockSolanaRPCClient_GetAccountDataInto_Call{Call: _e.mock.On("GetAccountDataInto", ctx, account, inVar)}
}

func (_c *MockSolanaRPCClient_GetAccountDataInto_Call) Run(run func(ctx context.Context, account solana.PublicKey, inVar interface{})) *MockSolanaRPCClient_GetAccountDataInto_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(solana.PublicKey), args[2].(interface{}))
	})
	return _c
}

func (_c *MockSolanaRPCClient_GetAccountDataInto_Call) Return(err error) *MockSolanaRPCClient_GetAccountDataInto_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSolanaRPCClient_GetAccountDataInto_Call) RunAndReturn(run func(context.Context, solana.PublicKey, interface{}) error) *MockSolanaRPCClient_GetAccountDataInto_Call {
	_c.Call.Return(run)
	return _c
}

// GetParsedTransaction provides a mock function with given fields: ctx, txSig, opts
func (_m *MockSolanaRPCClient) GetParsedTransaction(ctx context.Context, txSig string, opts *rpc.GetParsedTransactionOpts) (*rpc.GetParsedTransactionResult, error) {
	ret := _m.Called(ctx, txSig, opts)

	if len(ret) == 0 {
		panic("no return value specified for GetParsedTransaction")
	}

	var r0 *rpc.GetParsedTransactionResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *rpc.GetParsedTransactionOpts) (*rpc.GetParsedTransactionResult, error)); ok {
		return rf(ctx, txSig, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *rpc.GetParsedTransactionOpts) *rpc.GetParsedTransactionResult); ok {
		r0 = rf(ctx, txSig, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rpc.GetParsedTransactionResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *rpc.GetParsedTransactionOpts) error); ok {
		r1 = rf(ctx, txSig, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSolanaRPCClient_GetParsedTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetParsedTransaction'
type MockSolanaRPCClient_GetParsedTransaction_Call struct {
	*mock.Call
}

// GetParsedTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - txSig string
//   - opts *rpc.GetParsedTransactionOpts
func (_e *MockSolanaRPCClient_Expecter) GetParsedTransaction(ctx interface{}, txSig interface{}, opts interface{}) *MockSolanaRPCClient_GetParsedTransaction_Call {
	return &MockSolanaRPCClient_GetParsedTransaction_Call{Call: _e.mock.On("GetParsedTransaction", ctx, txSig, opts)}
}

func (_c *MockSolanaRPCClient_GetParsedTransaction_Call) Run(run func(ctx context.Context, txSig string, opts *rpc.GetParsedTransactionOpts)) *MockSolanaRPCClient_GetParsedTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*rpc.GetParsedTransactionOpts))
	})
	return _c
}

func (_c *MockSolanaRPCClient_GetParsedTransaction_Call) Return(_a0 *rpc.GetParsedTransactionResult, _a1 error) *MockSolanaRPCClient_GetParsedTransaction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSolanaRPCClient_GetParsedTransaction_Call) RunAndReturn(run func(context.Context, string, *rpc.GetParsedTransactionOpts) (*rpc.GetParsedTransactionResult, error)) *MockSolanaRPCClient_GetParsedTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// GetSignaturesForAddress provides a mock function with given fields: ctx, address
func (_m *MockSolanaRPCClient) GetSignaturesForAddress(ctx context.Context, address string) ([]*rpc.TransactionSignature, error) {
	ret := _m.Called(ctx, address)

	if len(ret) == 0 {
		panic("no return value specified for GetSignaturesForAddress")
	}

	var r0 []*rpc.TransactionSignature
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*rpc.TransactionSignature, error)); ok {
		return rf(ctx, address)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*rpc.TransactionSignature); ok {
		r0 = rf(ctx, address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*rpc.TransactionSignature)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSolanaRPCClient_GetSignaturesForAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSignaturesForAddress'
type MockSolanaRPCClient_GetSignaturesForAddress_Call struct {
	*mock.Call
}

// GetSignaturesForAddress is a helper method to define mock.On call
//   - ctx context.Context
//   - address string
func (_e *MockSolanaRPCClient_Expecter) GetSignaturesForAddress(ctx interface{}, address interface{}) *MockSolanaRPCClient_GetSignaturesForAddress_Call {
	return &MockSolanaRPCClient_GetSignaturesForAddress_Call{Call: _e.mock.On("GetSignaturesForAddress", ctx, address)}
}

func (_c *MockSolanaRPCClient_GetSignaturesForAddress_Call) Run(run func(ctx context.Context, address string)) *MockSolanaRPCClient_GetSignaturesForAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockSolanaRPCClient_GetSignaturesForAddress_Call) Return(_a0 []*rpc.TransactionSignature, _a1 error) *MockSolanaRPCClient_GetSignaturesForAddress_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSolanaRPCClient_GetSignaturesForAddress_Call) RunAndReturn(run func(context.Context, string) ([]*rpc.TransactionSignature, error)) *MockSolanaRPCClient_GetSignaturesForAddress_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransaction provides a mock function with given fields: ctx, txSig, opts
func (_m *MockSolanaRPCClient) GetTransaction(ctx context.Context, txSig string, opts *rpc.GetTransactionOpts) (*rpc.GetTransactionResult, error) {
	ret := _m.Called(ctx, txSig, opts)

	if len(ret) == 0 {
		panic("no return value specified for GetTransaction")
	}

	var r0 *rpc.GetTransactionResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *rpc.GetTransactionOpts) (*rpc.GetTransactionResult, error)); ok {
		return rf(ctx, txSig, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *rpc.GetTransactionOpts) *rpc.GetTransactionResult); ok {
		r0 = rf(ctx, txSig, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rpc.GetTransactionResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *rpc.GetTransactionOpts) error); ok {
		r1 = rf(ctx, txSig, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSolanaRPCClient_GetTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransaction'
type MockSolanaRPCClient_GetTransaction_Call struct {
	*mock.Call
}

// GetTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - txSig string
//   - opts *rpc.GetTransactionOpts
func (_e *MockSolanaRPCClient_Expecter) GetTransaction(ctx interface{}, txSig interface{}, opts interface{}) *MockSolanaRPCClient_GetTransaction_Call {
	return &MockSolanaRPCClient_GetTransaction_Call{Call: _e.mock.On("GetTransaction", ctx, txSig, opts)}
}

func (_c *MockSolanaRPCClient_GetTransaction_Call) Run(run func(ctx context.Context, txSig string, opts *rpc.GetTransactionOpts)) *MockSolanaRPCClient_GetTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*rpc.GetTransactionOpts))
	})
	return _c
}

func (_c *MockSolanaRPCClient_GetTransaction_Call) Return(out *rpc.GetTransactionResult, err error) *MockSolanaRPCClient_GetTransaction_Call {
	_c.Call.Return(out, err)
	return _c
}

func (_c *MockSolanaRPCClient_GetTransaction_Call) RunAndReturn(run func(context.Context, string, *rpc.GetTransactionOpts) (*rpc.GetTransactionResult, error)) *MockSolanaRPCClient_GetTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransactionInstructions provides a mock function with given fields: ctx, txSig, opts
func (_m *MockSolanaRPCClient) GetTransactionInstructions(ctx context.Context, txSig string, opts *rpc.GetTransactionOpts) ([]solana.CompiledInstruction, error) {
	ret := _m.Called(ctx, txSig, opts)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionInstructions")
	}

	var r0 []solana.CompiledInstruction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *rpc.GetTransactionOpts) ([]solana.CompiledInstruction, error)); ok {
		return rf(ctx, txSig, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *rpc.GetTransactionOpts) []solana.CompiledInstruction); ok {
		r0 = rf(ctx, txSig, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]solana.CompiledInstruction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *rpc.GetTransactionOpts) error); ok {
		r1 = rf(ctx, txSig, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSolanaRPCClient_GetTransactionInstructions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactionInstructions'
type MockSolanaRPCClient_GetTransactionInstructions_Call struct {
	*mock.Call
}

// GetTransactionInstructions is a helper method to define mock.On call
//   - ctx context.Context
//   - txSig string
//   - opts *rpc.GetTransactionOpts
func (_e *MockSolanaRPCClient_Expecter) GetTransactionInstructions(ctx interface{}, txSig interface{}, opts interface{}) *MockSolanaRPCClient_GetTransactionInstructions_Call {
	return &MockSolanaRPCClient_GetTransactionInstructions_Call{Call: _e.mock.On("GetTransactionInstructions", ctx, txSig, opts)}
}

func (_c *MockSolanaRPCClient_GetTransactionInstructions_Call) Run(run func(ctx context.Context, txSig string, opts *rpc.GetTransactionOpts)) *MockSolanaRPCClient_GetTransactionInstructions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*rpc.GetTransactionOpts))
	})
	return _c
}

func (_c *MockSolanaRPCClient_GetTransactionInstructions_Call) Return(instructions []solana.CompiledInstruction, err error) *MockSolanaRPCClient_GetTransactionInstructions_Call {
	_c.Call.Return(instructions, err)
	return _c
}

func (_c *MockSolanaRPCClient_GetTransactionInstructions_Call) RunAndReturn(run func(context.Context, string, *rpc.GetTransactionOpts) ([]solana.CompiledInstruction, error)) *MockSolanaRPCClient_GetTransactionInstructions_Call {
	_c.Call.Return(run)
	return _c
}

// SendEncodedTransaction provides a mock function with given fields: ctx, encodedTx
func (_m *MockSolanaRPCClient) SendEncodedTransaction(ctx context.Context, encodedTx string) (solana.Signature, error) {
	ret := _m.Called(ctx, encodedTx)

	if len(ret) == 0 {
		panic("no return value specified for SendEncodedTransaction")
	}

	var r0 solana.Signature
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (solana.Signature, error)); ok {
		return rf(ctx, encodedTx)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) solana.Signature); ok {
		r0 = rf(ctx, encodedTx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(solana.Signature)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, encodedTx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSolanaRPCClient_SendEncodedTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendEncodedTransaction'
type MockSolanaRPCClient_SendEncodedTransaction_Call struct {
	*mock.Call
}

// SendEncodedTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - encodedTx string
func (_e *MockSolanaRPCClient_Expecter) SendEncodedTransaction(ctx interface{}, encodedTx interface{}) *MockSolanaRPCClient_SendEncodedTransaction_Call {
	return &MockSolanaRPCClient_SendEncodedTransaction_Call{Call: _e.mock.On("SendEncodedTransaction", ctx, encodedTx)}
}

func (_c *MockSolanaRPCClient_SendEncodedTransaction_Call) Run(run func(ctx context.Context, encodedTx string)) *MockSolanaRPCClient_SendEncodedTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockSolanaRPCClient_SendEncodedTransaction_Call) Return(signature solana.Signature, err error) *MockSolanaRPCClient_SendEncodedTransaction_Call {
	_c.Call.Return(signature, err)
	return _c
}

func (_c *MockSolanaRPCClient_SendEncodedTransaction_Call) RunAndReturn(run func(context.Context, string) (solana.Signature, error)) *MockSolanaRPCClient_SendEncodedTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSolanaRPCClient creates a new instance of MockSolanaRPCClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSolanaRPCClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSolanaRPCClient {
	mock := &MockSolanaRPCClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
